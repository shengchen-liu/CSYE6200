package edu.neu.csye6200;
//wage for employee (sort)
//gpa (sort)


// call studentFactory
// use singleFactory pattern , pass criteria, let the factory to decide which criteria to choose
// then change to Factory pattern
//class company : sortEmployee { copy all the codes from employees sorting, create a constructor + addEmployee()}

/** 
superclass: person  it is an interface. public void execute();
public class Factory{ 
	private Factory(){}
	get crunchy(){if criteria = "", retrun new [Ob]j}


public class student implements Person{
	public Integer()

	@Override
	public void execute(){
	}
}

DesignPatternDemo(){
	for(PersonAPI p: persons){
		p.execute();
	}
}
**/

public class Driver {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
